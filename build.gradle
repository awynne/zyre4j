
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

version="0.1"
group="io.github.awynne"

// Main class to run from application start script
mainClassName = "com.example.hellozyre.ZyreDemo"

/*
 * Platform labels
 */

def final PLAT_OSX = "osx"
def final PLAT_X64_LINUX = "x64linux"
def final PLAT_X64_WINDOWS = "x64windows"

/*
 * Define some local variables for paths on each platform
 */

def artifactBase = "${project.name}-${project.version}"
def czmqJni = "${project.rootDir}/../czmq/bindings/czmq-jni"
def zyreJni = "${project.rootDir}/../zyre/bindings/jni"
def systemLibs = "/usr/local/lib"

/*
 * Determine platform from java "os.name" property. Use this 
 * information to set native library paths
 */

def os = System.properties['os.name'].toLowerCase()
def platform

if (os.contains("mac")) { 
    platform = PLAT_OSX
}
else if (os.contains("linux")) { 
    platform = PLAT_X64_LINUX
}
else if (os.contains("windows")) { 
    platform = PLAT_X64_WINDOWS
}
else { 
    throw new RuntimeException("platform not supported: $os")    
}

/*
 * 
 */

repositories {
    mavenCentral()
    mavenLocal()
    /*
    flatDir {
        dirs 'jar'
    }
    */
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    //compile "com.bosch.zyre:zyre-jni-core:0.2"
    compile "org.zeromq:zyre-jni:0.1.0-SNAPSHOT"
    compile "org.zeromq:czmq-jni:0.1.0-SNAPSHOT"
    
    // test
    testCompile 'junit:junit:4.12'
}

/*
 *  Configure native properties for tests to be able to run
 *  on each platform
 */

test {
    systemProperties = System.getProperties()
    systemProperties['java.library.path'] = "./native/${platform}"
}

task copyNativeOSX(type: Copy) {
    from "$czmqJni"
    from "$zyreJni"
    from "$systemLibs"
    include "libsodium.dylib"
    include "libzmq.dylib"
    include "libczmq.dylib"
    include "libzyre.dylib"
    include "libzyre-jni.dylib"
    into "./native/${platform}"
}

task copyNativeLinux(type: Copy) {
    from "$czmqJni"
    from "$zyreJni"
    from "$systemLibs"
    include "libsodium.so"
    include "libzmq.so"
    include "libczmq.so"
    include "libzyre.so"
    include "libzyrejni.so"
    include "libczmqjni.so"
    into "./native/${platform}"
}

/*
task copyNativeWin(type: Copy) {
    //from "$zyrejniWinNative"
    include "libsodium.dll"
    include "libzmq.dll"
    include "czmq.dll"
    include "zyre.dll"
    include "zyre-jni.dll"
    into "./native/${platform}"
}
*/

task copyNative() {
    doLast {
        if (platform.equals(PLAT_OSX)) 
            copyNativeOSX.execute()
        else if (platform.equals(PLAT_X64_LINUX)) 
            copyNativeLinux.execute()
        /* else if (platform.equals(PLAT_X64_WINDOWS)) 
            copyNativeWin.execute() */
        else {
            throw new RuntimeException("copy native for $platform not supported yet")
        }
    }
}

/*
 * Modify the start scripts so that we can set the java.library.path
 * from our custom launcher scripts
 */

startScripts {
    doLast {
        def unixScript = file getUnixScript()
            unixScript.text = unixScript.text
            .replace('DEFAULT_JVM_OPTS=\"\"', 'DEFAULT_JVM_OPTS=\"-Djava.library.path=$NATIVE_PATH\"')
			
        def winScript = file getWindowsScript()	
            winScript.text = winScript.text
            .replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=\"-Djava.library.path=%NATIVE_PATH%\"')
    }
}


